# Properties file for use by StdSchedulerFactory
# to create a Quartz Scheduler Instance.
#
# Instances of the specified JobStore, ThreadPool and Logger classes will
# be created by name, and then any additional properties specified for them
# in this file will be set on the instance by calling an equivalent 'set'
# method. (see below for more examples)
#


# Configure Main Scheduler Properties  ======================================
#
# The general pattern for defining the scheduler's main properties is:
#
#     org.quartz.scheduler.instanceName = SCHED_NAME
#     org.quartz.scheduler.instanceId = INSTANCE_ID
#     org.quartz.scheduler.logger = LOGGER_NAME
#     org.quartz.scheduler.rmi.export = false
#     org.quartz.scheduler.rmi.proxy = false
#     org.quartz.scheduler.rmi.registryHost = localhost
#     org.quartz.scheduler.rmi.registryPort = 1099
#
# "SCHED_NAME" can be any string, and has no meaning to the scheduler itself -
# but rather serves as a mechanism for client code to distinguish schedulers
# when multiple instances are used within the same program.  If you are using
# the clustering features, it may make sense to use the same name for every
# instance in the cluster that is 'logically' the same Scheduler.
#
# "INSTANCE_ID" can be any string, and but must be unique for all schedulers
# working as if they are the same 'logical' Scheduler within a cluster.
#
# "LOGGER_NAME" must be the name of one of the loggers defined in this file.
#
# RMI notes:
#
# If you want the Quartz Scheduler exported via RMI as a server then set
# the 'rmi.export' flag to true.  You must also then specify a  host and
# port for the rmiregistry process - which is typically 'localhost' port 1099.
#
# If you want to connect (use) a remotely served scheduler, then set the
# 'rmi.proxy' flag to true.  You must also then specify a  host and port
# for the rmiregistry process - which is typically 'localhost' port 1099.
#
# You cannot specify a 'true' value for both 'export' and 'proxy' - if you
# do, the 'export' option will be ignored.  A value of 'false' for both
# 'export' and 'proxy' properties is of course valid.
#
org.quartz.scheduler.instanceName = Sched1
org.quartz.scheduler.instanceId = 1
org.quartz.scheduler.logger = schedLogger
org.quartz.scheduler.rmi.export = false
org.quartz.scheduler.rmi.proxy = false


# Configure Logger(s)  ======================================================
#
# Loggers can be defined for:
#  * The scheduler (logs job execution information)
#  * The ThreadPool (logs errors in the pool of threads used to execute jobs)
#  * The JobStore (loggs errors in the job/trigger persistence layer)
#
# You don't have to define 3 distinct loggers -- if you wish, you can define
# one logger and re-use it when setting the logger on the different components.
#
# The general pattern for defining a logger is one of the following:
#
#     org.quartz.logger.NAME.class = org.quartz.impl.Log4jLogger
#     org.quartz.logger.NAME.categoryName = CAT_NAME
#
#  or
#
#     org.quartz.logger.NAME.class = org.quartz.impl.CommonsLogger
#     org.quartz.logger.NAME.categoryName = CAT_NAME
#
#  or
#
#     org.quartz.logger.NAME.class = org.quartz.simpl.SimpleLogger
#     org.quartz.logger.NAME.loggingPriority = LOG_PRIO
#     org.quartz.logger.NAME.outputFile = FILE_NAME
#     org.quartz.logger.NAME.append = true
#
#  or
#
#     org.quartz.logger.NAME.class = com.mycompany.goo.FooLogger
#     org.quartz.logger.NAME.somePropOfFooLogger = someValue
#
#
# The logger's "NAME" can be anything you want, and has no meaning other than
# being able to 'define' a logger here, and assign it by name to the particular
# components.
#
# A Log4jLogger's "CAT_NAME" can be any string that is a valid Log4j category
# name.
#
# A Log4jLogger's logging priority and output files (appenders) should be
# defined in the normal Log4j fashion (external to Quartz).
#
# A CommonsLogger's "CAT_NAME" can be any string that is a valid category
# name for the backing logger.
#       (see http://jakarta.apache.org/commons/logging.html for more info)
#
# A CommonsLogger's logging priority and output files (appenders) should be
# defined in the normal fashion for the backing logger (external to Quartz).
#       (see http://jakarta.apache.org/commons/logging.html for more info)
#
# A SimpleLogger's "LOG_PRIO" must be an integer within the range of the
# PRIO_XXX constants defined on the SimpleLogger class. (currently
# PRIO_CRITICAL = 0 and PRIO_DEBUG = 4)
#
# A SimpleLogger's "FILE_NAME" must be string that represents a valid path on
# the file system.  If you exclude this property, stderr will be used for
# output.  The 'append' property can obviously be either 'true' or 'false'.
#
org.quartz.logger.schedLogger.class = org.quartz.impl.Log4jLogger
org.quartz.logger.schedLogger.categoryName = scheduler
org.quartz.logger.tpLogger.class = org.quartz.impl.Log4jLogger
org.quartz.logger.tpLogger.categoryName = scheduler.threadPool
org.quartz.logger.jsLogger.class = org.quartz.impl.Log4jLogger
org.quartz.logger.jsLogger.categoryName = scheduler.persistence


# Configure ThreadPool  =====================================================
#
# The general pattern for defining a thread pool is the following:
#
#     org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
#     org.quartz.threadPool.threadCount = THREAD_COUNT
#     org.quartz.threadPool.threadPriority = THREAD_PRIO
#     org.quartz.threadPool.logger = LOGGER_NAME
#
#  or
#
#     org.quartz.threadPool.class = com.mycompany.goo.FooThreadPool
#     org.quartz.threadPool.somePropOfFooThreadPool = someValue
#
# "THREAD_COUNT" can be any positive integer, although you should realize that
# only numbers between 1 and 100 are very practical.  This is the number of
# threads that are available for concurrent execution of jobs.  If you only
# have a few jobs that fire a few times a day, then 1 thread is plenty! If you
# have tens of thousands of jobs, with many firing every minute, then you
# probably want a thread count more like 50 or 100 (this highly depends on the
# nature of the work that your jobs perform, and your systems resources!)
#
# "THREAD_PRIO" can be any int between Thread.MIN_PRIORITY (0) and
# Thread.MAX_PRIORITY (9).  The default is Thread.NORM_PRIORITY (4).
#
# "LOGGER_NAME" must be the name of one of the loggers defined in this file.
#
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount = 3
org.quartz.threadPool.threadPriority = 4
org.quartz.threadPool.logger = tpLogger

# Configure JobStore  =======================================================
#
# The general pattern for defining a JobStore is one of the following:
#
#     org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore
#     org.quartz.jobStore.logger = LOGGER_NAME
#
#  or
#
#     org.quartz.jobStore.class = org.quartz.impl.JDBCJobStore
#     org.quartz.jobStore.dataSource = DS_NAME
#     org.quartz.jobStore.tablePrefix = TABLE_PREFIX
#     org.quartz.jobStore.logger = LOGGER_NAME
#
#     org.quartz.jobStore.sqlServerStyleBlobs = BLOB_STYLE
#
#     org.quartz.jobStore.postgresStyleBlobs = BLOB_STYLE
#
#  or
#
#     org.quartz.jobStore.class = com.mycompany.goo.FooJobStore
#     org.quartz.jobStore.somePropOfFooJobStore = someValue
#
#
# "LOGGER_NAME" must be the name of one of the loggers defined in this file.
#
# A JDBCJobStore's "DS_NAME" must be the name of one the datasources defined
# in this file.
#
# If you wish all scheduling operations (adding/removing jobs,triggers &
# calendars) to be performed as part of an XA transaction, then you must
# specify a second datasource, that contains the XA connections. Specify
# this datasource where the value "XA_DATA_SOURCE" is in the examples
# above.
#
# A JDBCJobStore's "TABLE_PREFIX" is a string equal to the prefix given to
# Quartz's tables that were created in your database.
#
# JDBCJobStore's "sqlServerStyleBlobs" value should be set to 'true' if you are
# using MS SQLServer as your db, or if you seem to be having problems with the
# retrieval of records with Blob columns (Jobs and Calendars)
#
# JDBCJobStore's "postgresStyleBlobs" value should be set to 'true' if you are
# using PostresSQL as your db, or if you seem to be having problems with the
# retrieval of records with Blob columns (Jobs and Calendars)
#
org.quartz.jobStore.class = org.quartz.impl.JDBCJobStore
org.quartz.jobStore.dataSource = myDS
org.quartz.jobStore.tablePrefix = QRTZ_
org.quartz.jobStore.logger = jsLogger


# Configure Datasources  ====================================================
#
# (only needed when using JDBCJobStore)
#
# The general pattern for defining a DataSource is one of the following:
#
#     org.quartz.dataSource.NAME.driver = DRIVER_CLASS_NAME
#     org.quartz.dataSource.NAME.URL = DB_URL
#     org.quartz.dataSource.NAME.user = DB_USER
#     org.quartz.dataSource.NAME.password = DB_PASSWORD
#     org.quartz.dataSource.NAME.maxConnections = DB_POOL_SIZE
#
#  or
#
#     org.quartz.dataSource.NAME.jndiURL = DB_JNDI_URL
#
# The DataSource's "NAME" can be anything you want, and has no meaning other
# than being able to 'define' a DataSource here, and assign it by name to the
# JDBCJobStore.
#
# With the two types of DataSource definition shown above, a DataSource can
# either be created with the given database connection information, or can
# be "logically mapped" to use a DataSource that is managed by an application
# server an made available via JNDI.
#
# "DRIVER_CLASS_NAME" must be the java class name of the JDBC driver for your
# database.
#
# "DB_URL" must be the connection URL (host, port, etc.) for connection to your
# database.
#
# "DB_USER" is the user name to use when connecting to your database.
#
# "DB_USER" is the password to use when connecting to your database.
#
# "DB_POOL_SIZE" is the maximum number of connections that the DataSource can
# create in it's pool of connections.
#
# "DB_JNDI_URL" is the JNDI URL for a DataSource that is managed by your
# application server.
#
org.quartz.dataSource.myDS.driver = oracle.jdbc.driver.OracleDriver
org.quartz.dataSource.myDS.URL = jdbc:oracle:thin:@10.0.1.23:1521:demodb
org.quartz.dataSource.myDS.user = mops_proto
org.quartz.dataSource.myDS.password = mops_proto
org.quartz.dataSource.myDS.maxConnections = 3




